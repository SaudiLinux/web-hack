#!/usr/bin/env python3

import requests
from bs4 import BeautifulSoup
from rich.console import Console
from rich.progress import Progress
from datetime import datetime
import sys
import re

class VulnerabilityScanner:
    def __init__(self, target, port=None):
        self.target = target
        self.port = port
        self.console = Console()
        self.vulnerabilities = []
        self.headers = {
            'User-Agent': 'Web-Hack Security Scanner v1.0 (SayerLinux)'
        }

    def normalize_url(self, url):
        """تطبيع عنوان URL للفحص"""
        if not url.startswith(('http://', 'https://')):
            url = f'http://{url}'
        if self.port:
            url = f'{url}:{self.port}'
        return url

    def check_ssl(self, url):
        """فحص شهادة SSL"""
        try:
            response = requests.get(url, headers=self.headers, verify=True)
            return True
        except requests.exceptions.SSLError:
            self.vulnerabilities.append({
                'type': 'SSL_VULNERABILITY',
                'severity': 'HIGH',
                'description': 'Invalid SSL certificate or SSL misconfiguration detected'
            })
            return False
        except Exception as e:
            self.console.print(f'[red]Error checking SSL: {str(e)}[/red]')
            return False

    def check_headers(self, url):
        """فحص رؤوس HTTP الأمنية"""
        try:
            response = requests.get(url, headers=self.headers)
            headers = response.headers

            security_headers = {
                'Strict-Transport-Security': 'Missing HSTS header',
                'X-Content-Type-Options': 'Missing X-Content-Type-Options header',
                'X-Frame-Options': 'Missing X-Frame-Options header',
                'X-XSS-Protection': 'Missing X-XSS-Protection header'
            }

            for header, message in security_headers.items():
                if header not in headers:
                    self.vulnerabilities.append({
                        'type': 'SECURITY_HEADER_MISSING',
                        'severity': 'MEDIUM',
                        'description': message
                    })

        except Exception as e:
            self.console.print(f'[red]Error checking headers: {str(e)}[/red]')

    def check_information_disclosure(self, url):
        """فحص تسريب المعلومات"""
        try:
            response = requests.get(url, headers=self.headers)
            soup = BeautifulSoup(response.text, 'html.parser')

            # البحث عن تعليقات HTML
            comments = soup.find_all(string=lambda text: isinstance(text, str) and '-->' in text)
            if comments:
                self.vulnerabilities.append({
                    'type': 'INFORMATION_DISCLOSURE',
                    'severity': 'LOW',
                    'description': 'HTML comments found that might reveal sensitive information'
                })

            # البحث عن إصدارات البرامج
            version_patterns = [
                r'version\s*[:\=]\s*[\\'\